/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.hotoday.common.thrift.color;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-05")
public class ABDyeingRequest implements org.apache.thrift.TBase<ABDyeingRequest, ABDyeingRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ABDyeingRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ABDyeingRequest");

  private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_VER_FIELD_DESC = new org.apache.thrift.protocol.TField("app_ver", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("_types", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ABDyeingRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ABDyeingRequestTupleSchemeFactory());
  }

  public String app; // required
  public String app_ver; // required
  public List<String> _types; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP((short)1, "app"),
    APP_VER((short)2, "app_ver"),
    _TYPES((short)3, "_types");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP
          return APP;
        case 2: // APP_VER
          return APP_VER;
        case 3: // _TYPES
          return _TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VER, new org.apache.thrift.meta_data.FieldMetaData("app_ver", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._TYPES, new org.apache.thrift.meta_data.FieldMetaData("_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ABDyeingRequest.class, metaDataMap);
  }

  public ABDyeingRequest() {
  }

  public ABDyeingRequest(
    String app,
    String app_ver,
    List<String> _types)
  {
    this();
    this.app = app;
    this.app_ver = app_ver;
    this._types = _types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ABDyeingRequest(ABDyeingRequest other) {
    if (other.isSetApp()) {
      this.app = other.app;
    }
    if (other.isSetApp_ver()) {
      this.app_ver = other.app_ver;
    }
    if (other.isSet_types()) {
      List<String> __this___types = new ArrayList<String>(other._types);
      this._types = __this___types;
    }
  }

  public ABDyeingRequest deepCopy() {
    return new ABDyeingRequest(this);
  }

  @Override
  public void clear() {
    this.app = null;
    this.app_ver = null;
    this._types = null;
  }

  public String getApp() {
    return this.app;
  }

  public ABDyeingRequest setApp(String app) {
    this.app = app;
    return this;
  }

  public void unsetApp() {
    this.app = null;
  }

  /** Returns true if field app is set (has been assigned a value) and false otherwise */
  public boolean isSetApp() {
    return this.app != null;
  }

  public void setAppIsSet(boolean value) {
    if (!value) {
      this.app = null;
    }
  }

  public String getApp_ver() {
    return this.app_ver;
  }

  public ABDyeingRequest setApp_ver(String app_ver) {
    this.app_ver = app_ver;
    return this;
  }

  public void unsetApp_ver() {
    this.app_ver = null;
  }

  /** Returns true if field app_ver is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_ver() {
    return this.app_ver != null;
  }

  public void setApp_verIsSet(boolean value) {
    if (!value) {
      this.app_ver = null;
    }
  }

  public int get_typesSize() {
    return (this._types == null) ? 0 : this._types.size();
  }

  public java.util.Iterator<String> get_typesIterator() {
    return (this._types == null) ? null : this._types.iterator();
  }

  public void addTo_types(String elem) {
    if (this._types == null) {
      this._types = new ArrayList<String>();
    }
    this._types.add(elem);
  }

  public List<String> get_types() {
    return this._types;
  }

  public ABDyeingRequest set_types(List<String> _types) {
    this._types = _types;
    return this;
  }

  public void unset_types() {
    this._types = null;
  }

  /** Returns true if field _types is set (has been assigned a value) and false otherwise */
  public boolean isSet_types() {
    return this._types != null;
  }

  public void set_typesIsSet(boolean value) {
    if (!value) {
      this._types = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP:
      if (value == null) {
        unsetApp();
      } else {
        setApp((String)value);
      }
      break;

    case APP_VER:
      if (value == null) {
        unsetApp_ver();
      } else {
        setApp_ver((String)value);
      }
      break;

    case _TYPES:
      if (value == null) {
        unset_types();
      } else {
        set_types((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP:
      return getApp();

    case APP_VER:
      return getApp_ver();

    case _TYPES:
      return get_types();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP:
      return isSetApp();
    case APP_VER:
      return isSetApp_ver();
    case _TYPES:
      return isSet_types();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ABDyeingRequest)
      return this.equals((ABDyeingRequest)that);
    return false;
  }

  public boolean equals(ABDyeingRequest that) {
    if (that == null)
      return false;

    boolean this_present_app = true && this.isSetApp();
    boolean that_present_app = true && that.isSetApp();
    if (this_present_app || that_present_app) {
      if (!(this_present_app && that_present_app))
        return false;
      if (!this.app.equals(that.app))
        return false;
    }

    boolean this_present_app_ver = true && this.isSetApp_ver();
    boolean that_present_app_ver = true && that.isSetApp_ver();
    if (this_present_app_ver || that_present_app_ver) {
      if (!(this_present_app_ver && that_present_app_ver))
        return false;
      if (!this.app_ver.equals(that.app_ver))
        return false;
    }

    boolean this_present__types = true && this.isSet_types();
    boolean that_present__types = true && that.isSet_types();
    if (this_present__types || that_present__types) {
      if (!(this_present__types && that_present__types))
        return false;
      if (!this._types.equals(that._types))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_app = true && (isSetApp());
    list.add(present_app);
    if (present_app)
      list.add(app);

    boolean present_app_ver = true && (isSetApp_ver());
    list.add(present_app_ver);
    if (present_app_ver)
      list.add(app_ver);

    boolean present__types = true && (isSet_types());
    list.add(present__types);
    if (present__types)
      list.add(_types);

    return list.hashCode();
  }

  @Override
  public int compareTo(ABDyeingRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_ver()).compareTo(other.isSetApp_ver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_ver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_ver, other.app_ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_types()).compareTo(other.isSet_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._types, other._types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ABDyeingRequest(");
    boolean first = true;

    sb.append("app:");
    if (this.app == null) {
      sb.append("null");
    } else {
      sb.append(this.app);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("app_ver:");
    if (this.app_ver == null) {
      sb.append("null");
    } else {
      sb.append(this.app_ver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_types:");
    if (this._types == null) {
      sb.append("null");
    } else {
      sb.append(this._types);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (app == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'app' was not present! Struct: " + toString());
    }
    if (app_ver == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'app_ver' was not present! Struct: " + toString());
    }
    if (_types == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_types' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ABDyeingRequestStandardSchemeFactory implements SchemeFactory {
    public ABDyeingRequestStandardScheme getScheme() {
      return new ABDyeingRequestStandardScheme();
    }
  }

  private static class ABDyeingRequestStandardScheme extends StandardScheme<ABDyeingRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ABDyeingRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app = iprot.readString();
              struct.setAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_VER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app_ver = iprot.readString();
              struct.setApp_verIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._types = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct._types.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ABDyeingRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.app != null) {
        oprot.writeFieldBegin(APP_FIELD_DESC);
        oprot.writeString(struct.app);
        oprot.writeFieldEnd();
      }
      if (struct.app_ver != null) {
        oprot.writeFieldBegin(APP_VER_FIELD_DESC);
        oprot.writeString(struct.app_ver);
        oprot.writeFieldEnd();
      }
      if (struct._types != null) {
        oprot.writeFieldBegin(_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct._types.size()));
          for (String _iter3 : struct._types)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ABDyeingRequestTupleSchemeFactory implements SchemeFactory {
    public ABDyeingRequestTupleScheme getScheme() {
      return new ABDyeingRequestTupleScheme();
    }
  }

  private static class ABDyeingRequestTupleScheme extends TupleScheme<ABDyeingRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ABDyeingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.app);
      oprot.writeString(struct.app_ver);
      {
        oprot.writeI32(struct._types.size());
        for (String _iter4 : struct._types)
        {
          oprot.writeString(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ABDyeingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.app = iprot.readString();
      struct.setAppIsSet(true);
      struct.app_ver = iprot.readString();
      struct.setApp_verIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct._types = new ArrayList<String>(_list5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct._types.add(_elem6);
        }
      }
      struct.set_typesIsSet(true);
    }
  }

}

