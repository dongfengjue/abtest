/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.hotoday.common.thrift.color;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-05")
public class ABDyeingUidRepInfo implements org.apache.thrift.TBase<ABDyeingUidRepInfo, ABDyeingUidRepInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ABDyeingUidRepInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ABDyeingUidRepInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _UID_REP_FIELD_DESC = new org.apache.thrift.protocol.TField("_uid_rep", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ABDyeingUidRepInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ABDyeingUidRepInfoTupleSchemeFactory());
  }

  public String uid; // required
  public ABDyeingReply _uid_rep; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    _UID_REP((short)2, "_uid_rep");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // _UID_REP
          return _UID_REP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._UID_REP, new org.apache.thrift.meta_data.FieldMetaData("_uid_rep", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ABDyeingReply.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ABDyeingUidRepInfo.class, metaDataMap);
  }

  public ABDyeingUidRepInfo() {
  }

  public ABDyeingUidRepInfo(
    String uid,
    ABDyeingReply _uid_rep)
  {
    this();
    this.uid = uid;
    this._uid_rep = _uid_rep;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ABDyeingUidRepInfo(ABDyeingUidRepInfo other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSet_uid_rep()) {
      this._uid_rep = new ABDyeingReply(other._uid_rep);
    }
  }

  public ABDyeingUidRepInfo deepCopy() {
    return new ABDyeingUidRepInfo(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this._uid_rep = null;
  }

  public String getUid() {
    return this.uid;
  }

  public ABDyeingUidRepInfo setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public ABDyeingReply get_uid_rep() {
    return this._uid_rep;
  }

  public ABDyeingUidRepInfo set_uid_rep(ABDyeingReply _uid_rep) {
    this._uid_rep = _uid_rep;
    return this;
  }

  public void unset_uid_rep() {
    this._uid_rep = null;
  }

  /** Returns true if field _uid_rep is set (has been assigned a value) and false otherwise */
  public boolean isSet_uid_rep() {
    return this._uid_rep != null;
  }

  public void set_uid_repIsSet(boolean value) {
    if (!value) {
      this._uid_rep = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case _UID_REP:
      if (value == null) {
        unset_uid_rep();
      } else {
        set_uid_rep((ABDyeingReply)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case _UID_REP:
      return get_uid_rep();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case _UID_REP:
      return isSet_uid_rep();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ABDyeingUidRepInfo)
      return this.equals((ABDyeingUidRepInfo)that);
    return false;
  }

  public boolean equals(ABDyeingUidRepInfo that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present__uid_rep = true && this.isSet_uid_rep();
    boolean that_present__uid_rep = true && that.isSet_uid_rep();
    if (this_present__uid_rep || that_present__uid_rep) {
      if (!(this_present__uid_rep && that_present__uid_rep))
        return false;
      if (!this._uid_rep.equals(that._uid_rep))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present__uid_rep = true && (isSet_uid_rep());
    list.add(present__uid_rep);
    if (present__uid_rep)
      list.add(_uid_rep);

    return list.hashCode();
  }

  @Override
  public int compareTo(ABDyeingUidRepInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet_uid_rep()).compareTo(other.isSet_uid_rep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_uid_rep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._uid_rep, other._uid_rep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ABDyeingUidRepInfo(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_uid_rep:");
    if (this._uid_rep == null) {
      sb.append("null");
    } else {
      sb.append(this._uid_rep);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    if (_uid_rep == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_uid_rep' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (_uid_rep != null) {
      _uid_rep.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ABDyeingUidRepInfoStandardSchemeFactory implements SchemeFactory {
    public ABDyeingUidRepInfoStandardScheme getScheme() {
      return new ABDyeingUidRepInfoStandardScheme();
    }
  }

  private static class ABDyeingUidRepInfoStandardScheme extends StandardScheme<ABDyeingUidRepInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ABDyeingUidRepInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _UID_REP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct._uid_rep = new ABDyeingReply();
              struct._uid_rep.read(iprot);
              struct.set_uid_repIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ABDyeingUidRepInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct._uid_rep != null) {
        oprot.writeFieldBegin(_UID_REP_FIELD_DESC);
        struct._uid_rep.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ABDyeingUidRepInfoTupleSchemeFactory implements SchemeFactory {
    public ABDyeingUidRepInfoTupleScheme getScheme() {
      return new ABDyeingUidRepInfoTupleScheme();
    }
  }

  private static class ABDyeingUidRepInfoTupleScheme extends TupleScheme<ABDyeingUidRepInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ABDyeingUidRepInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      struct._uid_rep.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ABDyeingUidRepInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct._uid_rep = new ABDyeingReply();
      struct._uid_rep.read(iprot);
      struct.set_uid_repIsSet(true);
    }
  }

}

